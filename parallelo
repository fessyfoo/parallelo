#!/usr/bin/perl

# copyright 2010 john "fess" fessenden
# Released under the Gnu Public License

## yet another parallelizer
## this one in perl and not specific to ssh. in the hopes of being portable and useful

# TODO: handle command  output in an organized fashion.   save to file.  or prefixed with hostname
# TODO: host range expansion

use strict;
use IO::Handle;
use IO::Select;
use IPC::Open3;
use POSIX qw(:sys_wait_h);

use Getopt::Long qw(
  :config
  require_order
  pass_through
  no_ignore_case
);

my $run_count = 0;
my $max_paralllel = 20;
my %hosts;

sub reap_child {
  my $pid = waitpid (-1, WNOHANG);
  my $ret = $?;
  return undef unless $pid > 0;
  return  $pid > 0 ?  ($pid, $ret) : ();
}

sub make_cmd {
  my $host = shift;
  my $user = shift;
  my @args = @_;
  return map {
    s/__HOST__/$host/g;
    s/__USER__/$user/g;
    $_;
  } @args;
}

sub run_cmd { 
  my $host = shift;
  my $out  = new IO::Handle ();
  my $err  = new IO::Handle ();

  my $pid = open3(undef, $out, $err, @_);

  # failed fork
  die "fork failed; $!" if ! defined $pid;

  # parent
  if ($pid) {
    return { 
      pid    => $pid,
      stderr => $err,
      stdout => $out,
      host   => $host
    }
  }
  die "unexpected return from open3";
}

sub handle_data {
  my ($cmd, $data, $fd, $width) = @_;
  my $is_stdout = $cmd->{'stdout'} == $fd;
  my $fd_type = $is_stdout ? ':' : '!';
  my $output  = $is_stdout ? \*STDOUT : \*STDERR;
  printf $output
    "%-*s %s %s\n", 
    $width, 
    $cmd->{'host'},
    $fd_type,
    $_ 
      for split (/\n/, $data);
}

sub handle_exit {
  my $cmd = shift;
  my $width = shift;
  my $ret = $cmd->{'ret'};
  printf 
    "%-*s %s %s ", 
    $width, 
    $cmd->{'host'};
  if ($ret & 127) {
      print "died on signal ", ($ret & 127);
  } else {
    print "exited ", $ret >> 8;
  }
  print "\n";
}

my @hostfiles;
my @hosts;
my $user = $ENV{'USER'};


GetOptions 
  ( 
    "H|hostfile=s"  => \@hostfiles,
    "h|host=s"      => \@hosts,
    "l|user=s"      => \$user,
    "max-parallel=i" => \$max_paralllel,
  ) || die "bad args\n";

for my $hostfile (@hostfiles)
  {
    open (FH, $hostfile) || die "failed to open $hostfile: $!\n";
    while (<FH>) 
      { 
        next if /^#/;
	s/#.*//;
	s/\s.*//g;
	push (@hosts, $_);
      }
  }

my $width=0;
for (@hosts) {
  my $len = length $_;
  $width = $len if $len > $width;
}

my $select = new IO::Select ();
my %running;
my %index;
my $sigchild = 0;

$SIG{'CHLD'} = sub { $sigchild = 1; };

while (@hosts || %running) {

  while (@hosts && %running < $max_paralllel) {
    my $host = shift @hosts;
    my @args = make_cmd ($host, $user, @ARGV);
    my $cmd = run_cmd ($host, @args);
    $select->add ($cmd->{'stdout'}, $cmd->{'stderr'});
    $index {$_} = $cmd
      for ($cmd->{'stdout'}, $cmd->{'stderr'}, $cmd->{'pid'});
    $running{$host} = $cmd;
  }

  for my $fd ($select->can_read ()) {
    my $data;
    my $cmd = $index{$fd} || die "unexpected file descriptor!"; 

    my $ct = sysread ($fd, $data, 8096);
    if ($ct != 0) {
      handle_data ($cmd, $data, $fd, $width);
    } else {
      $select->remove ($fd);
      $cmd->{'fd_done_ct'}++;
    }
  }

  if ($sigchild) {
    $sigchild = 0;
    while (1) {
      my ($pid, $ret) = reap_child ();
      last unless $pid;
      my $cmd = $index{$pid} or die "unexpected pid $pid\n";
      $cmd->{'ret'} = $ret;
    }
  }

  for my $host (keys %running) {
    my $cmd = $running{$host};
    if (defined $cmd->{'ret'} && $cmd->{'fd_done_ct'} >= 2) {
      delete $running{$host};
      handle_exit ($cmd, $width);
    }
  }
}
